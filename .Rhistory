country <- read_csv("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem)
View(country)
country <- read_csv("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792"))) %>%
select(-country)
View(country)
country <- read_csv("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792"))) %>%
select(-country)
country2 <- country %>%
group_by(country) %>%summarise(dem = first(dem))
View(country2)
country <- read_csv("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792")))
library(countrycode)
country <- read_csv("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792"))) %>%
select(-country)
View(country)
events <- read_csv("Raw Data/Country Coding.csv")%>%
select(country=name, year, event_date=date, gallup_availability=`Gallup Coverage`, completed, rulingParty, rulPartyChange)%>%
drop_na()%>%
filter(gallup_availability=="yes" & !(country=="US" & year==2011))%>%     ##REMOVE US 2011 events manually, this is just a stop-gap measure to make coding simpler, can be brought back later
mutate(country_code_c = countrycode(country, origin="country.name",
destination="iso3c", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="AZE", "Kosovo"="XKX")))%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(event_date=ymd(event_date)) %>%
select(-gallup_availability) %>%
left_join(survey_dates, by=c("country_code", "year")) %>%  #combine survey and event dates
mutate(before_survey = survey_date>event_date)%>%  #check if survey occurred before event to determine when to begin the year selection
mutate(start_year = if_else(before_survey, year-3, year-2))%>% # determine the first of the six years to extract from gallup data
filter(country_code != 275) %>% filter(country_code != 608) %>% #Remove Palestine and Philippines (more than 1 assassination in a year)
mutate(event_id=factor(row_number())) # creates an id for each event, which will be useful in the case of multiple events in the same country
## IMPORT HANDCODED COUNTRY DATA, standardizing dates and country codes
events <- read_csv("Raw Data/Country Coding.csv")%>%
select(country=name, year, event_date=date, gallup_availability=`Gallup Coverage`, completed, rulingParty, rulPartyChange)%>%
drop_na()%>%
filter(gallup_availability=="yes" & !(country=="US" & year==2011))%>%     ##REMOVE US 2011 events manually, this is just a stop-gap measure to make coding simpler, can be brought back later
mutate(country_code_c = countrycode(country, origin="country.name",
destination="iso3c", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="AZE", "Kosovo"="XKX")))%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(event_date=ymd(event_date)) %>%
select(-gallup_availability) %>%
left_join(survey_dates, by=c("country_code", "year")) %>%  #combine survey and event dates
mutate(before_survey = survey_date>event_date)%>%  #check if survey occurred before event to determine when to begin the year selection
mutate(start_year = if_else(before_survey, year-3, year-2))%>% # determine the first of the six years to extract from gallup data
filter(country_code != 275) %>% filter(country_code != 608) %>% #Remove Palestine and Philippines (more than 1 assassination in a year)
mutate(event_id=factor(row_number())) # creates an id for each event, which will be useful in the case of multiple events in the same country
library(tidyverse)
library(countrycode)
library(lubridate)
events <- read_csv("Raw Data/Country Coding.csv")%>%
select(country=name, year, event_date=date, gallup_availability=`Gallup Coverage`, completed, rulingParty, rulPartyChange)%>%
drop_na()%>%
filter(gallup_availability=="yes" & !(country=="US" & year==2011))%>%     ##REMOVE US 2011 events manually, this is just a stop-gap measure to make coding simpler, can be brought back later
mutate(country_code_c = countrycode(country, origin="country.name",
destination="iso3c", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="AZE", "Kosovo"="XKX")))%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(event_date=ymd(event_date)) %>%
select(-gallup_availability) %>%
left_join(survey_dates, by=c("country_code", "year")) %>%  #combine survey and event dates
mutate(before_survey = survey_date>event_date)%>%  #check if survey occurred before event to determine when to begin the year selection
mutate(start_year = if_else(before_survey, year-3, year-2))%>% # determine the first of the six years to extract from gallup data
filter(country_code != 275) %>% filter(country_code != 608) %>% #Remove Palestine and Philippines (more than 1 assassination in a year)
mutate(event_id=factor(row_number())) # creates an id for each event, which will be useful in the case of multiple events in the same country
View(events)
View(survey_dates)
assasraw <- read_csv("Raw Data/gallupAssas.csv")%>%
rename(country=COUNTRYNEW, country_code_c=COUNTRY_ISO3, survey_date=FIELD_DATE,
year=YEAR_WAVE)%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(survey_date = mdy(survey_date))
## CREATE DATAFRAME WITH JUST SURVEY DATES for comparing with event dates for data selection
survey_dates <- assasraw %>%
group_by(country_code, year) %>%
summarize(survey_date = first(survey_date))
## IMPORT HANDCODED COUNTRY DATA, standardizing dates and country codes
events <- read_csv("Raw Data/Country Coding.csv")%>%
select(country=name, year, event_date=date, gallup_availability=`Gallup Coverage`, completed, rulingParty, rulPartyChange)%>%
drop_na()%>%
filter(gallup_availability=="yes" & !(country=="US" & year==2011))%>%     ##REMOVE US 2011 events manually, this is just a stop-gap measure to make coding simpler, can be brought back later
mutate(country_code_c = countrycode(country, origin="country.name",
destination="iso3c", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="AZE", "Kosovo"="XKX")))%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(event_date=ymd(event_date)) %>%
select(-gallup_availability) %>%
left_join(survey_dates, by=c("country_code", "year")) %>%  #combine survey and event dates
mutate(before_survey = survey_date>event_date)%>%  #check if survey occurred before event to determine when to begin the year selection
mutate(start_year = if_else(before_survey, year-3, year-2))%>% # determine the first of the six years to extract from gallup data
filter(country_code != 275) %>% filter(country_code != 608) %>% #Remove Palestine and Philippines (more than 1 assassination in a year)
mutate(event_id=factor(row_number())) # creates an id for each event, which will be useful in the case of multiple events in the same country
# IN ORDER TO SELECT THE REQUIRED YEARS of REQUIRED COUNTRIES from GALLUP and CODE THEM WITH EVENT IDENTIFIERS
# I make a new dataframe based on the data in 'events' which includes a row for each country and year combination needed
# in the six year study intervals.
event_dataframes <- list() # create a list to fill with dataframes for each country and year
# Make a dataframe for each row in events with a row for each year in the study interval. Here we create the variables needed
# interrupted time series analysis: a binary 'after' variable identifying whether the event has taken place, a 'year_number'
# variable which counts which year of the six we are in, and 'year_after' which counts how many years have passed since the event.
for(i in 1:nrow(events)){
row <- events[i,]
event_dataframes[[i]] <- tibble(event_id=rep(row$event_id, 6),
country = rep(row$country, 6),
country_code = rep(row$country_code, 6),
country_code_c = rep(row$country_code_c, 6),
event_date = rep(row$event_date, 6),
event_year = rep(row$year, 6),
start_year = rep(row$start_year,6),
year = row$start_year:(row$start_year+5),
after = c(0,0,0,1,1,1))
}
event_dataframe <- do.call(rbind,event_dataframes) # now bind all dataframes into a single dataframe
## MERGE 'event_dataframe' and GALLUP 'assasraw' to select only the years and countries required and fill each row with the
# interrupted time series variables required
assas <- left_join(event_dataframe, assasraw, by=c("country_code", "year"))%>%
select(-country.y, -country_code_c.y, -YEAR_CALENDAR) %>%
rename(country=country.x, country_code_c=country_code_c.x, weight=WGT) %>%
mutate(year_number = as.numeric(interval(event_date, survey_date), 'years')) %>%
mutate(year_after = if_else(after==1,as.numeric(interval(event_date, survey_date), 'years'), 0))
## IMPORT CNTS DATA
cnts <- import("Raw Data/2021 Edition CNTSDATA.xlsx", skip = 1)
survey_dates <- assasraw %>%
group_by(country_code, year) %>%
summarize(survey_date = first(survey_date))
## IMPORT HANDCODED COUNTRY DATA, standardizing dates and country codes
events <- read_csv("Raw Data/Country Coding.csv")%>%
select(country=name, year, event_date=date, gallup_availability=`Gallup Coverage`, completed, rulingParty, rulPartyChange)%>%
drop_na()%>%
filter(gallup_availability=="yes" & !(country=="US" & year==2011))%>%     ##REMOVE US 2011 events manually, this is just a stop-gap measure to make coding simpler, can be brought back later
mutate(country_code_c = countrycode(country, origin="country.name",
destination="iso3c", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="AZE", "Kosovo"="XKX")))%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(event_date=ymd(event_date)) %>%
select(-gallup_availability) %>%
left_join(survey_dates, by=c("country_code", "year")) %>%  #combine survey and event dates
mutate(before_survey = survey_date>event_date)%>%  #check if survey occurred before event to determine when to begin the year selection
mutate(start_year = if_else(before_survey, year-3, year-2))%>% # determine the first of the six years to extract from gallup data
filter(country_code != 275) %>% filter(country_code != 608) %>% #Remove Palestine and Philippines (more than 1 assassination in a year)
mutate(event_id=factor(row_number())) # creates an id for each event, which will be useful in the case of multiple events in the same country
# IN ORDER TO SELECT THE REQUIRED YEARS of REQUIRED COUNTRIES from GALLUP and CODE THEM WITH EVENT IDENTIFIERS
# I make a new dataframe based on the data in 'events' which includes a row for each country and year combination needed
# in the six year study intervals.
event_dataframes <- list() # create a list to fill with dataframes for each country and year
# Make a dataframe for each row in events with a row for each year in the study interval. Here we create the variables needed
# interrupted time series analysis: a binary 'after' variable identifying whether the event has taken place, a 'year_number'
# variable which counts which year of the six we are in, and 'year_after' which counts how many years have passed since the event.
for(i in 1:nrow(events)){
row <- events[i,]
event_dataframes[[i]] <- tibble(event_id=rep(row$event_id, 6),
country = rep(row$country, 6),
country_code = rep(row$country_code, 6),
country_code_c = rep(row$country_code_c, 6),
event_date = rep(row$event_date, 6),
event_year = rep(row$year, 6),
start_year = rep(row$start_year,6),
year = row$start_year:(row$start_year+5),
after = c(0,0,0,1,1,1))
}
event_dataframe <- do.call(rbind,event_dataframes) # now bind all dataframes into a single dataframe
## MERGE 'event_dataframe' and GALLUP 'assasraw' to select only the years and countries required and fill each row with the
# interrupted time series variables required
assas <- left_join(event_dataframe, assasraw, by=c("country_code", "year"))%>%
select(-country.y, -country_code_c.y, -YEAR_CALENDAR) %>%
rename(country=country.x, country_code_c=country_code_c.x, weight=WGT) %>%
mutate(year_number = as.numeric(interval(event_date, survey_date), 'years')) %>%
mutate(year_after = if_else(after==1,as.numeric(interval(event_date, survey_date), 'years'), 0))
## IMPORT CNTS DATA
cnts <- read_csv("Raw Data/2021 Edition CNTSDATA.xlsx", skip = 1)
#extracting the domestic conflict variable
#getting country codes to facilitate merging
cntsa <- cnts %>% select(year, country, domestic9) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926"))) %>%
select(-country)
library(rio)
## IMPORT CNTS DATA
cnts <- import("Raw Data/2021 Edition CNTSDATA.xlsx", skip = 1)
cntsa <- cnts %>% select(year, country, domestic9) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926"))) %>%
select(-country)
merged <- assas %>% left_join(., cntsa, by = c("country_code", "year"))
merged_before <- merged %>% filter(after == 0) %>%
group_by(country_code) %>%
summarize(conflict = mean(domestic9, na.rm=T))
#MERGE CNTS pre-event conflict data back to the assas object
assas <- assas %>% left_join(., merged_before)
##IMPORT GDP and V-DEM data
country <- read_csv("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792"))) %>%
select(-country)
#MERGE country-level covariates to assas data
assas <- assas %>% left_join(., country, by = c("country_code","year"))
#DATA PROCESSING creating standardized country-level covariates
#GDP is log2 transformed to account for diminishing return
assas <- assas %>% ungroup() %>%
mutate(loggdp_z = scale(log2(gdp))[,1],
conflict_z = scale(conflict)[,1])
write.csv(assas, "assas2.csv")
View(events)
for(i in 1:nrow(events)){
row <- events[i,]
event_dataframes[[i]] <- tibble(event_id=rep(row$event_id, 6),
country = rep(row$country, 6),
country_code = rep(row$country_code, 6),
country_code_c = rep(row$country_code_c, 6),
event_date = rep(row$event_date, 6),
event_year = rep(row$year, 6),
start_year = rep(row$start_year,6),
year = row$start_year:(row$start_year+5),
after = c(0,0,0,1,1,1),
completed = rep(row$completed, 6),
rulingParty = rep(row$rulingParty, 6),
rulPartyChange = rep(row$rulPartyChange, 6))
}
event_dataframe <- do.call(rbind,event_dataframes) # now bind all dataframes into a single dataframe
## MERGE 'event_dataframe' and GALLUP 'assasraw' to select only the years and countries required and fill each row with the
# interrupted time series variables required
assas <- left_join(event_dataframe, assasraw, by=c("country_code", "year"))%>%
select(-country.y, -country_code_c.y, -YEAR_CALENDAR) %>%
rename(country=country.x, country_code_c=country_code_c.x, weight=WGT) %>%
mutate(year_number = as.numeric(interval(event_date, survey_date), 'years')) %>%
mutate(year_after = if_else(after==1,as.numeric(interval(event_date, survey_date), 'years'), 0))
## IMPORT CNTS DATA
cnts <- import("Raw Data/2021 Edition CNTSDATA.xlsx", skip = 1)
#extracting the domestic conflict variable
#getting country codes to facilitate merging
cntsa <- cnts %>% select(year, country, domestic9) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926"))) %>%
select(-country)
#getting pre-event conflict data
merged <- assas %>% left_join(., cntsa, by = c("country_code", "year"))
merged_before <- merged %>% filter(after == 0) %>%
group_by(country_code) %>%
summarize(conflict = mean(domestic9, na.rm=T))
#MERGE CNTS pre-event conflict data back to the assas object
assas <- assas %>% left_join(., merged_before)
##IMPORT GDP and V-DEM data
country <- read_csv("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792"))) %>%
select(-country)
#MERGE country-level covariates to assas data
assas <- assas %>% left_join(., country, by = c("country_code","year"))
#DATA PROCESSING creating standardized country-level covariates
#GDP is log2 transformed to account for diminishing return
assas <- assas %>% ungroup() %>%
mutate(loggdp_z = scale(log2(gdp))[,1],
conflict_z = scale(conflict)[,1])
write.csv(assas, "assas2.csv")
write.csv(assas, "assas2.csv")
assasraw <- read_csv("Raw Data/gallupAssas2.csv")
library(tidyverse)
library(countrycode)
library(lubridate)
library(lme4)
library(lmerTest)
library(gee)
library(geepack)
library(ggplot2)
library(rio)
library(texreg)
assasraw <- read_csv("Raw Data/gallupAssas2.csv")
assasraw <- read_csv("Raw Data/gallupAssas2.csv")%>%
rename(country=COUNTRYNEW, country_code_c=COUNTRY_ISO3, survey_date=FIELD_DATE,
year=YEAR_WAVE, male=WP1219.MALE, age=WP1220.AGE, socialsupport=WP27.SUPPORT, govapproval=WP150.APPROVAL)%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(survey_date = mdy(survey_date))
survey_dates <- assasraw %>%
group_by(country_code, year) %>%
summarize(survey_date = first(survey_date))
## IMPORT HANDCODED COUNTRY DATA, standardizing dates and country codes
events <- read_csv("Raw Data/Country Coding.csv")%>%
select(country=name, year, event_date=date, gallup_availability=`Gallup Coverage`)%>%
drop_na()%>%
filter(gallup_availability=="yes" & !(country=="US" & year==2011))%>%     ##REMOVE US 2011 events manually, this is just a stop-gap measure to make coding simpler, can be brought back later
mutate(country_code_c = countrycode(country, origin="country.name",
destination="iso3c", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="AZE", "Kosovo"="XKX")))%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(event_date=ymd(event_date)) %>%
select(-gallup_availability) %>%
left_join(survey_dates, by=c("country_code", "year")) %>%  #combine survey and event dates
mutate(before_survey = survey_date>event_date)%>%  #check if survey occurred before event to determine when to begin the year selection
mutate(start_year = if_else(before_survey, year-3, year-2))%>% # determine the first of the six years to extract from gallup data
filter(country_code != 275) %>% filter(country_code != 608) %>% #Remove Palestine and Philippines (more than 1 assassination in a year)
mutate(event_id=factor(row_number())) # creates an id for each event, which will be useful in the case of multiple events in the same country
# IN ORDER TO SELECT THE REQUIRED YEARS of REQUIRED COUNTRIES from GALLUP and CODE THEM WITH EVENT IDENTIFIERS
# I make a new dataframe based on the data in 'events' which includes a row for each country and year combination needed
# in the six year study intervals.
event_dataframes <- list() # create a list to fill with dataframes for each country and year
# Make a dataframe for each row in events with a row for each year in the study interval. Here we create the variables needed
# interrupted time series analysis: a binary 'after' variable identifying whether the event has taken place, a 'year_number'
# variable which counts which year of the six we are in, and 'year_after' which counts how many years have passed since the event.
for(i in 1:nrow(events)){
row <- events[i,]
event_dataframes[[i]] <- tibble(event_id=rep(row$event_id, 6),
country = rep(row$country, 6),
country_code = rep(row$country_code, 6),
country_code_c = rep(row$country_code_c, 6),
event_date = rep(row$event_date, 6),
event_year = rep(row$year, 6),
start_year = rep(row$start_year,6),
year = row$start_year:(row$start_year+5),
after = c(0,0,0,1,1,1))
}
event_dataframe <- do.call(rbind,event_dataframes) # now bind all dataframes into a single dataframe
## MERGE 'event_dataframe' and GALLUP 'assasraw' to select only the years and countries required and fill each row with the
# interrupted time series variables required
assas <- left_join(event_dataframe, assasraw, by=c("country_code", "year"))%>%
select(-country.y, -country_code_c.y, -YEAR_CALENDAR) %>%
rename(country=country.x, country_code_c=country_code_c.x, weight=WGT) %>%
mutate(year_number = as.numeric(interval(event_date, survey_date), 'years')) %>%
mutate(year_after = if_else(after==1,as.numeric(interval(event_date, survey_date), 'years'), 0)) %>%
mutate(age_squared = age^2)
cnts <- import("Raw Data/2021 Edition CNTSDATA.xlsx", skip = 1)
#extracting the domestic conflict variable
#getting country codes to facilitate merging
cntsa <- cnts %>% select(year, country, domestic9) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926"))) %>%
select(-country)
#getting pre-event conflict data
merged <- assas %>% left_join(., cntsa, by = c("country_code", "year"))
merged_before <- merged %>% filter(after == 0) %>%
group_by(country_code) %>%
summarize(conflict = mean(domestic9, na.rm=T))
#MERGE CNTS pre-event conflict data back to the assas object
assas <- assas %>% left_join(., merged_before)
##IMPORT GDP and V-DEM data
country <- import("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792"))) %>%
select(-country)
#MERGE country-level covariates to assas data
assas <- assas %>% left_join(., country, by = c("country_code","year"))
#DATA PROCESSING creating standardized country-level covariates
#GDP is log2 transformed to account for diminishing return
assas <- assas %>% ungroup() %>%
mutate(loggdp_z = scale(log2(gdp))[,1],
conflict_z = scale(conflict)[,1])
write.csv(assas, "assas3.csv")
events <- read_csv("Raw Data/Country Coding.csv")%>%
select(country=name, year, event_date=date, gallup_availability=`Gallup Coverage`, completed, rulingParty, rulPartyChange)%>%
drop_na()%>%
filter(gallup_availability=="yes" & !(country=="US" & year==2011))%>%     ##REMOVE US 2011 events manually, this is just a stop-gap measure to make coding simpler, can be brought back later
mutate(country_code_c = countrycode(country, origin="country.name",
destination="iso3c", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="AZE", "Kosovo"="XKX")))%>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926")))%>%
mutate(event_date=ymd(event_date)) %>%
select(-gallup_availability) %>%
left_join(survey_dates, by=c("country_code", "year")) %>%  #combine survey and event dates
mutate(before_survey = survey_date>event_date)%>%  #check if survey occurred before event to determine when to begin the year selection
mutate(start_year = if_else(before_survey, year-3, year-2))%>% # determine the first of the six years to extract from gallup data
filter(country_code != 275) %>% filter(country_code != 608) %>% #Remove Palestine and Philippines (more than 1 assassination in a year)
mutate(event_id=factor(row_number())) # creates an id for each event, which will be useful in the case of multiple events in the same country
# IN ORDER TO SELECT THE REQUIRED YEARS of REQUIRED COUNTRIES from GALLUP and CODE THEM WITH EVENT IDENTIFIERS
# I make a new dataframe based on the data in 'events' which includes a row for each country and year combination needed
# in the six year study intervals.
event_dataframes <- list() # create a list to fill with dataframes for each country and year
# Make a dataframe for each row in events with a row for each year in the study interval. Here we create the variables needed
# interrupted time series analysis: a binary 'after' variable identifying whether the event has taken place, a 'year_number'
# variable which counts which year of the six we are in, and 'year_after' which counts how many years have passed since the event.
for(i in 1:nrow(events)){
row <- events[i,]
event_dataframes[[i]] <- tibble(event_id=rep(row$event_id, 6),
country = rep(row$country, 6),
country_code = rep(row$country_code, 6),
country_code_c = rep(row$country_code_c, 6),
event_date = rep(row$event_date, 6),
event_year = rep(row$year, 6),
start_year = rep(row$start_year,6),
year = row$start_year:(row$start_year+5),
after = c(0,0,0,1,1,1),
completed = rep(row$completed, 6),
rulingParty = rep(row$rulingParty, 6),
rulPartyChange = rep(row$rulPartyChange, 6))
}
event_dataframe <- do.call(rbind,event_dataframes) # now bind all dataframes into a single dataframe
## MERGE 'event_dataframe' and GALLUP 'assasraw' to select only the years and countries required and fill each row with the
# interrupted time series variables required
assas <- left_join(event_dataframe, assasraw, by=c("country_code", "year"))%>%
select(-country.y, -country_code_c.y, -YEAR_CALENDAR) %>%
rename(country=country.x, country_code_c=country_code_c.x, weight=WGT) %>%
mutate(year_number = as.numeric(interval(event_date, survey_date), 'years')) %>%
mutate(year_after = if_else(after==1,as.numeric(interval(event_date, survey_date), 'years'), 0)) %>%
mutate(age_squared = age^2)
## IMPORT CNTS DATA
cnts <- import("Raw Data/2021 Edition CNTSDATA.xlsx", skip = 1)
#extracting the domestic conflict variable
#getting country codes to facilitate merging
cntsa <- cnts %>% select(year, country, domestic9) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926"))) %>%
select(-country)
#getting pre-event conflict data
merged <- assas %>% left_join(., cntsa, by = c("country_code", "year"))
merged_before <- merged %>% filter(after == 0) %>%
group_by(country_code) %>%
summarize(conflict = mean(domestic9, na.rm=T))
#MERGE CNTS pre-event conflict data back to the assas object
assas <- assas %>% left_join(., merged_before)
##IMPORT GDP and V-DEM data
country <- import("Raw Data/GDPandLDI.csv") %>%
select(country = "Country Name", year = Year, gdp = GDPperCapPPP, dem = v2x_libdem) %>%
mutate(country_code = countrycode(country, origin="country.name",
destination="iso3n", warn=TRUE, nomatch=NULL,
custom_match=c("Azerbaijan"="031", "Kosovo"="926","Turkiye" = "792"))) %>%
select(-country)
#MERGE country-level covariates to assas data
assas <- assas %>% left_join(., country, by = c("country_code","year"))
#DATA PROCESSING creating standardized country-level covariates
#GDP is log2 transformed to account for diminishing return
assas <- assas %>% ungroup() %>%
mutate(loggdp_z = scale(log2(gdp))[,1],
conflict_z = scale(conflict)[,1])
write.csv(assas, "assas3.csv")
View(assas)
library(brms)
model <- readRDS("../BayesOutput/ModeratorAnalysis/model-ls-completed.rds")
postsample <- posterior_samples(model, c("after", "year_after"))
View(postsample)
ggplot(postsample, aes(x=b_after, y=b_year_after)) +
geom_hex()
library(tidyverse)
ggplot(postsample, aes(x=b_after, y=b_year_after)) +
geom_hex()
(tidyverse)
library(tidyverse)
library(ggplot)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(brms)
library(tidyverse)
install.package("tidyverse")
install.packages("tidyverse")
library(tidyverse)
devtools::install_github("RobinHankin/Brobdingnag")
devtools::install_github("RobinHankin/Brobdingnag")
install.packages("Brobidngnag")
install.packages("Brobdingnag")
install.packages("Brobdingnag")
library(tidyverse)
library(brms)
model <- readRDS("../BayesOutput/ModeratorAnalysis/model-ls-completed.rds")
postsample <- posterior_samples(model, c("after", "year_after"))
ggplot(postsample, aes(x=b_after, y=b_year_after)) +
geom_hex()
ggplot(postsample, aes(x=b_after, y=b_year_after)) +
geom_hex()
install.packages("hexbin")
library(hexbin)
ggplot(postsample, aes(x=b_after, y=b_year_after)) +
geom_hex()
ggplot(postsample, aes(x=b_after:completed, y=b_year_after:completed)) +
geom_hex()
ggplot(postsample, aes(x=`b_after:completed`, y=`b_year_after:completed`)) +
geom_hex()
library(brms)
library(tidyverse)
model <- readRDS("../BayesOutput/ModeratorAnalysis/model-ls-completed.rds")
library(tidyverse)
